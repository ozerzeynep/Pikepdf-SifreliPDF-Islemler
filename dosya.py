# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tvjcc4RURdp5GvW76wIRjc5-k4OcJTYs
"""

pip install pikepdf

import pikepdf

import re
from collections import defaultdict
from collections import defaultdict
from google.colab import files

categories = {
    "İklim Değişikliği ve Sera Gazları": [
        "climate", "co2", "ch4", "ghg", "n2o", "hfc", "pfc", "sf6", "warming",
        "temperature", "Kyoto", "Paris Agreement", "UNFCCC", "net-zero",
        "transition risk", "TCFD", "stranded assets"
    ],
    "Yenilenebilir Enerji ve Temiz Teknolojiler": [
        "renewable", "solar", "wind", "hydro", "photovoltaic", "silicium",
        "energy star", "clean", "energy", "resource efficiency"
    ],
    "Çevre Kirliliği ve Atık Yönetimi": [
        "waste", "wastage", "plastic", "recycla", "recycle", "pollut", "pollute",
        "emission", "smog", "discharge", "footprint", "carbon", "air quality",
        "hazardous", "asbestos", "sox", "sulphuric"
    ],
    "Doğa, Biyoçeşitlilik ve Doğal Kaynaklar": [
        "biodiversity", "ecosystem", "habitat", "endangered", "species",
        "extinctions", "forest", "ocean", "sea", "coral", "tree", "land",
        "mountain", "nature", "natural resources", "natural gas", "natural hazard"
    ],
    "Tarım, Hayvancılık ve Doğa Kullanımı": [
        "agriculture", "farmer", "animal", "fish", "soy", "sugar", "gmo",
        "grabbing", "conservation", "deforest"
    ],
    "Sanayi ve Malzeme Kullanımı": [
        "steel", "cement", "glass", "metal", "paper", "wood", "mines", "mining",
        "oil", "petrol", "diesel", "coal", "uranium", "fuel", "drill", "fracking"
    ],
    "Ulaşım ve Taşımacılık": [
        "automobile", "automotive", "car", "transport", "air travel",
        "corporate travel", "business travel", "vehicle"
    ],
    "İklim Riskleri ve Doğal Felaketler": [
        "hurricane", "cyclone", "drought", "flood", "heat", "heatwave",
        "wildfire", "storm", "weather", "physical risk"
    ],
    "Sürdürülebilirlik ve Kurumsal Yaklaşımlar": [
        "ESG", "sustain", "sustainability", "eco", "green", "durable",
        "durability", "circular", "building", "certific", "leed",
        "carbon neutrality", "decarbonisation", "environmental disclosures",
        "stakeholder legitimacy", "governance"
    ],
    "Küresel Anlaşmalar ve Konferanslar": [
        "COP21", "COP22", "COP23", "COP24", "COP25", "COP26", "COP27", "COP28"
    ]
}

!pip install pycryptodome

! pip install pikepdf

from pikepdf import Pdf

!pip install pikepdf pdfminer.six

import pikepdf
from pdfminer.high_level import extract_text

def unlock_pdf_and_extract_text(encrypted_path, output_path="unlocked.pdf"):
    try:
        pdf = pikepdf.open(encrypted_path)
        pdf.save(output_path)
        pdf.close()
        return extract_text(output_path).lower()
    except pikepdf._qpdf.PasswordError:
        print("PDF şifreli ve açılacak parola gerekli!")
        return ""

def count_keywords(text, categories):
    results = {}
    for category, keywords in categories.items():
        keyword_counts = {}
        for word in keywords:
            pattern = re.compile(rf"\b{re.escape(word.lower())}[a-z]*\b")
            matches = re.findall(pattern, text)
            if matches:
                keyword_counts[word] = len(matches)
        results[category] = keyword_counts
    return results
def find_dominant_category(results):
    category_totals = {
        cat: sum(counts.values()) for cat, counts in results.items()
    }
    return max(category_totals, key=category_totals.get), category_totals


uploaded = files.upload()

for filename in uploaded.keys():
    print(f"\n Analiz edilen dosya: {filename}")
    text = unlock_pdf_and_extract_text(filename)

    if not text.strip():
        print("Metin çıkartılamadı. PDF korumalı olabilir.")
        continue

    results = count_keywords(text, categories)
    dominant_category, totals = find_dominant_category(results)

    for cat, words in results.items():
        print(f"\n {cat}")
        for word, count in words.items():
            print(f" - {word}: {count}")
        print(f" Toplam: {sum(words.values())} kelime")

    print("\n En çok geçen kategori:")
    print(f" {dominant_category} ({totals[dominant_category]} kelime)")

